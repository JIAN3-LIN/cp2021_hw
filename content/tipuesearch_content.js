var tipuesearch = {"pages": [{'title': 'About', 'text': '這是計算機程式課程 2021 Fall 的作業倉儲與網站 template \n \n 41023133 \n 網站倉儲:  https://github.com/JIAN3-LIN/cp2021_hw \n 網站連結:\xa0 https://jian3-lin.github.io/cp2021_hw/ \n 其他與個人或作業相關資料說明或介紹 \n', 'tags': '', 'url': 'About.html'}, {'title': 'tokens', 'text': '1.github頭像下的Setting->Developer settings->Personal access tokens \n 2.按Generate new token生成一把token( repo記得打勾) \n 3.將生成的那串密碼貼在.git裡的config裡的url = \xa0 http://*@github.com..... \xa0 \n *的地方(,記得後面加@) \n', 'tags': '', 'url': 'tokens.html'}, {'title': 'Git', 'text': '推薦-> Git & GitHub 教學手冊 \n', 'tags': '', 'url': 'Git.html'}, {'title': 'git push', 'text': '1.如果你要將更新推送至遠端,首先必須要有使用者名稱和信箱 \n \xa0你可以在命令列上輸入: \n \xa0 git config --global user.email "you@example.com" \n \xa0 git config --global user.name "Your Name" \n 如果輸入成功你應該會在home_ipv4或6(看使用者用什麼開)裡找到叫.gitconfig的檔案 \n 你的使用者名稱和信箱就存在裡面 \n 2.你必須要有 token 或者 ssh \n \n 3.最後你可以用 acp " *** " 指令推送 \n', 'tags': '', 'url': 'git push.html'}, {'title': 'git 指令', 'text': 'git init \xa0 將目前的目錄初始化為 Git 目錄, 建立本地儲存庫 git config \xa0 設定或檢視 Git 設定檔資訊 git add \xa0 將檔案加入 Git 暫存區 git rm \xa0 將檔案移出 Git 暫存區 git status \xa0 顯示 Git 狀態 git commit \xa0 將暫存區的檔案提交至儲存庫納入版本控制 git log \xa0 顯示過去歷次的版本異動 git reflog \xa0 顯示完整的版本異動歷史紀錄 git show \xa0 顯示指定版本的異動內容 git branch \xa0 建立一個新分支 (branch) git checkout \xa0 取出分支內容還原為工作目錄 git merge \xa0 合併分支 git reset \xa0 重設某一版本 git clone \xa0 從遠端儲存庫 (GitHub 或 Bitbucket) 複製副本至本地儲存庫 git push \xa0 將本地儲存庫內容推送到遠端儲存庫 git pull \xa0 將遠端儲存庫拉回合併更新到本地儲存庫 \n', 'tags': '', 'url': 'git 指令.html'}, {'title': 'ssh push', 'text': '1.下載 putty . \n 2.用PuTTY裡的puttygen.exe做一把金鑰 \n (先按Generate然後滑鼠亂動一下) \n 3.將key存到遠端github \n (帳號頭象下Settings裡的SSH and GPG keys) \n 4.回到 puttygen.exe案save private key(可以存到home_ipv4或6) \n 5.然後開啟PuTTY裡的putty.exe,在hostname和saved sessions欄位都填入github.com(先save), \n 然後將SSH裡的Auth指向你存的金鑰(再save) \n 6.按一下open \n 7.將倉儲裡的.git裡的config用編譯器打開,將[remote "origin"] \n 改成 url = \xa0 git@github.com:(自己帳號)/cp2021_hw.git \n 8.記得確認start_ipv4.bat裡有set GIT_SSH=%Disk%:\\PuTTY\\plink.exe \n', 'tags': '', 'url': 'ssh push.html'}, {'title': 'HW1', 'text': 'HW1 - 網際動畫與 touch typing 佔學期成績 20%. \n 何謂  Secure Shell ? \n HTTPS:  https://en.wikipedia.org/wiki/HTTPS \n Transport Layer Security:  https://en.wikipedia.org/wiki/Transport_Layer_Security \n SSH:  https://en.wikipedia.org/wiki/Secure_Shell \n 如何利用 SSH 協定將倉儲改版內容推送到 Github: \n SSH 了沒 \n 以下為 Github 所提供有關 Token 與 SSH 的說明資料: \n Github Personal Token:  https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ \n Github SSH:  https://docs.github.com/en/authentication/connecting-to-github-with-ssh \n Using the SSH protocol, you can connect and authenticate to remote servers and services. With SSH keys, you can connect to GitHub without supplying your username and personal access token at each visit. \n GnuPG  (GNU Privacy Guard): \n 如何利用  https://www.gpg4win.org/  保全數位檔案傳送. \n https://gnupg.org/gph/en/manual.pdf \n https://gnupg.org/documentation/manuals/gnupg.pdf \n https://www.gpg4win.org/doc/en/gpg4win-compendium.html \n 由於數位檔案很容易被改造, 因此在製作數位檔案內容時, 在 Windows 平台上可以利用 Gpg4win 加密或保全. \n GnuPG 加密 \n GnuPG 保全 - 在網站提供檔案下載前, 利用 Gpg4win 對檔案進行數位簽章 \n 在執行作業之前, 必須要仔細閱讀作業要求內容, 想像一下作業指定者為何要提出此一作業, 其目的為何, 然後再根據要求逐一安排時間完成. \n 作業一的主題為網際動畫與 touch typing, 並要求學員要至 Github 申請帳號, 並將作業內容直接在課程網頁中執行 Brython (Browser Python), 完成後將程式碼放到各學員 Github 帳號下的 Gist 區域, 然後再將作業連結提交至課程網頁倉儲的 Discussion 區. \n 另外, 除了要修改 Task1 頁面中動畫的程式外, 還要求使用者從 Cango 頁面, 將程式中的網際按鈕放到頁面, 以便控制程式的執行或中斷. \n 假如直翻 Browser Python 就是瀏覽器上的 Python, 除了能夠在瀏覽器上執行的 Python, 還有沒有其他環境上能夠執行的 Python？ \n 例如: 1994 年剛被開發出來的 Python 是用 C 寫的, 所以稱為 CPython, 可以在各種操作系統平台上執行, 而且累積二十幾年的發展, 已經擁有許多的程式庫, 讓 CPython 可以解決許多工程問題. \n 除了 CPython 與 Brython (以 Javascript 編寫) 之外, 還有以 Java 編寫的  Jython , 以 .NET 技術編寫的  ironPython , 還有以 Rust 編寫的  RustPython  或是以 Python 編寫的  PyPy , 每一種 Python 都有其特色, 在適合的環境中可用來解決各種不同的問題. \n \n 當我們看到  https://mde.tw/cp2021/content/Task1.html  這個頁面中的程式執行時, 應該會好奇, 為何能夠直接在瀏覽器的網頁上, 直接點擊 Run, Python 程式就能執行, 在頁面中畫靜態與動態的圖型. \n 這種在網頁上畫圖的依據是採用 HTML5 規格中的  Canvas API . 原本是設計給 Javascript 在網頁上繪圖, 透過 Canvas API 程式語法, 就可以透過 Brython 在頁面中繪圖. \n \n HW1 - 網際動畫與 touch typing 佔學期成績 20%. \n HW1 具體項目成果回報區 \n \n 請至  https://github.com  申請 Github 帳號後, 至  https://mde.tw/cp2021/content/Task1.html  頁面, 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n 請將 1. 的程式碼存入個人 Gist 區 ( 說明 ). \n 請在 1. 的程式中, 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n 請在 Gist 檔案編輯區, 利用鍵盤輸入  https://docs.github.com/en/github/writing-on-github/editing-and-sharing-content-with-gists/creating-gists#about-gists  中的這段英文內容, 請利用手機計時, 大概需要多少時間? 請將此段練習打字的內容與所需時間存入 Gist 檔案中. \n 請至少練習 key in 這段英文內容三次, 然後看看是否已經了解如何透過電腦鍵盤 touch typing? \n 接下來請利用中文輸入  https://ithelp.ithome.com.tw/articles/10206233  的第一段中文說明, 請利用手機計時, 大概需要多少時間? \n \n \n HW1-1 : 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n HW1-2 : 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n 程式碼說明: \n HW1-1.py \n Brython browser 模組 \n Brython browser html 模組 \n Brython enable/disable event \n Python 函式定義與呼叫 \n Python 縮排 (indentation) \n 字串 (string) \n 數列 (list) \n if 判斷式 \n 在 Python 關鍵字中, None, True 與 False 第一個字母都必須是大寫 \n 在 python.org 網站範圍搜尋 global 關鍵字 \n 有關 Python 的 global:  https://docs.python.org/3/faq/programming.html#what-are-the-rules-for-local-and-global-variables-in-python \n # 從 browser 導入 html\nfrom browser import html\n# 從 browser 導入 document 並且對應為 doc\nfrom browser import document as doc\n# 導入 browser.timer\nimport browser.timer\n\n# 定義一個 game() 函式\ndef game():\n    """\n利用 global 關鍵字 將 px, py 與 speed \n設為可在函式內改變對應內容 \n(意即, 這三個定義在函式外的全域變數,  \n在函式中分別位於等號左邊)\n    """\n    global px, py, speed\n    ctx.clearRect(px, py, width, height)\n    ctx.fillStyle = "red"\n    if px < canvas.width/2:\n        px += speed\n    else:\n        py -= speed\n    \n    if px < 0 or (px + width) > canvas.width:\n        speed = -speed\n    if py < 0 or (py + height) > canvas.height:\n        speed = -speed\n    \n    ctx.fillRect(px, py, width, height)\n\n"""\na variable declared outside of the function or \nin global scope is known as a global variable. \nThis means that a global variable can be accessed \ninside or outside of the function.\n"""\n\ncanvas = html.CANVAS(width = 600, height = 600)\ncanvas.id = "game-board"\nbrython_div = doc["brython_div"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\npx = 0\npy = 50\nwidth = 20\nheight = 20\nspeed = 2\n\nbrowser.timer.set_interval(game, 10) \n HW1-2.py \n from browser import document as doc\nfrom browser import timer\nfrom browser import html\nimport math\n\n# 建立 game-board canvas\n\ncanvas = html.CANVAS(width = 300, height = 300)\ncanvas.id = "game-board"\nbrython_div = doc["brython_div"]\nbrython_div <= canvas\nctx = canvas.getContext("2d")\npx = 0\npy = 50\nwidth = 20\nheight = 20\nspeed = 2\n\n# 建立 button\nbrython_div <= html.BUTTON("啟動", id="power")\n \ndef game():\n    global px, py, speed\n    ctx.clearRect(px, py, width, height)\n    ctx.fillStyle = "red"\n    if px < canvas.width/2:\n        px += speed\n    else:\n        py -= speed\n    \n    if px < 0 or (px + width) > canvas.width:\n        speed = -speed\n    if py < 0 or (py + height) > canvas.height:\n        speed = -speed\n    \n    ctx.fillRect(px, py, width, height)\n \n \n# 將 anim 設為 None\nanim = None\n \ndef launchAnimation(ev):\n    global anim\n    # 初始啟動, anim 為 None\n    if anim is None:\n        # 每 0.1 秒執行一次 draw 函式繪圖\n        anim = timer.set_interval(game, 10)\n        # 初始啟動後, 按鈕文字轉為"暫停"\n        doc[\'power\'].text = \'暫停\'\n    elif anim == \'hold\':\n        # 當 anim 為 \'hold\' 表示曾經暫停後的啟動, 因此持續以 set_interval() 持續旋轉, 且將 power 文字轉為"暫停"\n        anim = timer.set_interval(game, 10)\n        doc[\'power\'].text = \'暫停\'\n    else:\n        # 初始啟動後, 使用者再按 power, 此時 anim 非 None 也不是 \'hold\', 因此會執行 clear_interval() 暫停\n        # 且將 anim 變數設為 \'hold\', 且 power 文字轉為"繼續"\n        timer.clear_interval(anim)\n        anim = \'hold\'\n        doc[\'power\'].text = \'繼續\'\n\n \ndoc["power"].bind("click", launchAnimation)\n \n \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'W4', 'text': 'HW1 HW2 \n  導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n red redbutton \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'TYPING', 'text': 'Gist是Github的一個子服務，且任何人都可以使用這個服務，不論你是否擁有Github帳號。以開發者的角度來說，最基本的功能就是可以分享片段的原始碼。有別於Github\n的Repository，Gist可以只分享專案中的某一個小檔案中的原始碼，且擁有私人的選項，讓別人不會搜尋你的Gist。在Github的Repository設定Private是要付費的，但\n在Gist是不需要的。除此之外Gist還有許多好處，包括可以直接執行我們就來一一介紹吧!\n7minutes 30seconds\n\nEvery gist is a Gist repository, which means that it can be forked and cloned. If you are signed in to GitHub when you create a gist,the gist will be associated with your account and you will see it in your list of gists when you naviagate to your gist home page.\n\nGists can be public or secret. Public gists show up in Discover, where people can browse new gists as they\'re created. They\'re also searchable, so you can use them if you\'d like other people to find and see your work.ur\n\nSecret gists don\'t show up in Discover and sre not searchable. Secret gists aren\'t private. If you send the URL of a secret gist to a friend, they\'ll be able to see it. However, if someone you don\'t know discovers the URL, they\'ll also be able to see your gist. If you need to keep your code away from prying eyes, you may want to create a private repository instead.\n\nAfter creating a gist, you cannot convert  it from public to secret.\n\nYou\'ll receive a notification when:\n\nYou are the author of a gist. Someone mentions you in a gist. You subscribe to a gist, by clicking Subscribe at the top of any gist.\n\nYou can pin gists to your profile so other people can see them easily. For more information, see "Pinning items to your profile."\n\nYou can discover public gists others have created by going to the gist home pagr and clicking All Gist Search. Gist search uses the same search syntax as code search.\n\nSince gists are Git repositories, you can view their full commit history, complete with diffs. You can also fork or clone gists. For more information, see"Forking and cloning gists".\n\nYou can download a ZIP file of a gist by clicking the Download ZIP button at the top of the gist. You can embed a gist in any text field that supports Javascript, such as a blog post. To get the embed code, click the clipboard icon next to the Embed URL of a gist. To embed a specific gist file, append the Embed URL wih ?file=FILENAME.\n\nGist supports mapping\n\nGeoJSON files. These maps are displayed in embedded gists, so you can easily share and embed maps. For more infomation, see "Working with non-code file."\n\n44minutes\n\n \n', 'tags': '', 'url': 'TYPING.html'}, {'title': 'W4 HW1 HW2心得', 'text': '這是第一次接觸到計算機程式以及Python，很多地方都還不太懂，剛開始學遇到很多困難，不知道做作作業要從何下手，但後來上課把老師有講的跟自己不會的都記下來，作業有不懂的也都有去問同學，現在有比較了解一些了。 \n', 'tags': '', 'url': 'W4 HW1 HW2心得.html'}, {'title': 'HW2', 'text': '在電腦輔助設計的新電腦上可以利用 USB 隨身碟設定所謂 Hybrid 可攜程式系統, 也就是 Python 與 Portablegit 使用 c:\\2021_portable_kmol\\data 目錄中的檔案, 而將 start_ipv4.bat, start_ipv6.bat, data, wscite, tmp 等目錄放在 USB 隨身碟. \n 在電腦輔助設計室中, 以 USB 隨身碟啟動的 start_ipv4.bat 檔案內容:  start_ipv4_hybrid.txt \n 在動態系統中加入 run 頁面的 html 原始碼:  run.txt \n 當你建立 Github 帳號後就可以利用 Gist 儲存資料或程式碼, 且可以利用  https://mde.tw/cp2021/content/run.html  來執行 Brython 程式. \n 在  run.html  執行 Brython 程式, 可以使用下列三種方法: \n \n 直接連線至  https://mde.tw/cp2021/content/run.html  將 Brython 程式寫在編輯區, 然後按下 Run. \n 將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL,  run.html  中的 Javascript 就會導入此 Gist 程式執行. \n 將 Brython 程式寫在  run.html  頁面 html 超文件中, 然後安排其中的 Javascript 或 Brython 程式導入執行. \n \n 建立可攜程式系統時必須了解 start_ipv4.bat 或 start_ipv6.bat 中的所有指令用法: \n 以電腦輔助設計室中使用新電腦的 USB 可攜 Hybrid 設定 start_ipv4.bat 為例. \n @echo off\nset Disk=y\nsubst %Disk%: "data"\n\nset Local=C:\\2021_cadlab_portable\\data\n\n%Disk%:\n\nset HomePath=%Disk%:\\home_ipv4\nset HomeDrive=%Disk%:\\home_ipv4\nset Home=%Disk%:\\home_ipv4\nset USERPROFILE=%Disk%:\\home_ipv4\n\nREM 將系統 Python 程式的 io 設為 utf-8\nset PYTHONIOENCODING="utf-8"\n\nset PYTHONPATH=%Local%\\Python395\\DLLs;%Local%\\Python395\\Lib;%Local%\\Python395\\Lib\\site-packages;\n\nset PYTHONHOME=%Local%\\Python395\n\nREM 使用 putty 設定 git ssh 連線\nset GIT_SSH=%Disk%:\\putty\\plink.exe\n\nREM 設定跟 Python 有關的命令搜尋路徑\nset path_python=%Local%\\Python395;%Local%\\Python395\\Scripts;\nset path_portablegit=%Local%\\portablegit_2.31.1\\bin;\n\npath=%Disk%:;%path_python%;%path_portablegit%;%path%;\n\nREM ref: https://drive.google.com/file/d/1S0XYN-1MKxo0KFYxs0pFTcTrr8NL4n1b/view\n\nREM REGEDIT.EXE /S %Disk%:\\putty_github_com.reg;\n\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\nstart /MIN cmd.exe\n\nstart /MIN %Disk%:\\wScite\\SciTE.exe\nstart /MIN %Disk%:\\wScite\\SciTE.exe\n\nExit \n 因為電腦 C:\\ 中存放的可攜系統位於 C:\\2021_cadlab_portable\\data, 因此將此路徑設為 Local 變數, 然後與 Python 即 Portablegit 有關的路徑都使用 %Local% 變數設定. \n 有關 SSH push 設定必須將 putty 系統登錄檔案匯出後, 在啟動隨身系統時載入所需設定.  putty 設定登錄檔案匯出與匯入說明影片 . \n Windows 指令: \n echo off , 而放在前面的  @ 指令說明 . \n set : 設定 環境變數 . \n HomePath, HomeDrive, Home, USERPROFILE 都屬於 Windows 操作系統的 環境變數 . \n HW1-1 : 將左右碰撞移動的紅色方塊, 改為先移動到水平畫面中心點位置後, 接著上下碰撞移動. \n HW1-2 : 加入與  Cango 頁面  Fourbar 程式碼相同功能的啟動按鈕, 讓使用者可以利用按鈕啟動或中斷紅色方塊上下碰撞移動. 完成後請將程式碼存入個人 Gist 區. \n \n HW2 - 可攜程式系統與個人網站佔學期成績 20%. \n HW2 具體項目成果回報區 \n 可攜程式系統與 Python 範例程式收集整理 \n 1. 請準備一個至少 64 GB 大小的 USB 3.0 以上隨身碟 (或外接 SSD), 根據  Task2  中的說明, 建立自己的可攜程式系統. \n 2. 請登入 Github 帳號後, 連線至  https://github.com/mdecourse/cp2021_hw  後, 透過  Use this template  按鈕建立自己的 cp2021_hw 倉儲. 並至該倉儲的 Settings -> Pages -> Source 將 main 分支設為 Github Pages 的 root (也就是選擇將倉儲的 main 分支設為對應網站的根目錄). \n 3. 請將 HW1 與 HW2 的作業內容登錄至個人的 cp2021_hw 倉儲與網站中. (學習如何透過 git 指令修改倉儲中的版本內容) \n 4. 請在個人作業網站的 HW2 區域下增設一個 H2 頁面, 將該網頁標題命名為 run, 可以如  run  頁面中的內容, 並且利用此頁面收集 Python 範例程式. (例如: 可自動執行的貪食蛇:  https://mde.tw/cp2021/content/run.html?src=https://gist.githubusercontent.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439/raw/2160a12b9fec9707a120a383ed5d38b9b78a02cf/snake.py  將  https://gist.github.com/mdecourse/d306a1f57e53bfd6466eaae20bcb9439  作為  https://mde.tw/cp2021/content/run.html  頁面中 src 變數的值, 就可以在頁面中導入程式碼並執行) \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'run1', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'run1.html'}, {'title': 'run2', 'text': '第二種執行 Brython 程式的方法, 是將 Brython 程式存在 Gist, 利用 run.html?src=Gist_URL,  run.html  中的 Javascript 就會導入此 Gist 程式並自動執行. \n 按下導入 cango_gear1.py 且自動執行 \n 上述連結為: \n https://mde.tw/cp2021_hw/content/run.html?src=https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py \n run.html 後的變數為 ?src= https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py \n 其中的  e896a4705a95ac8cc4147b355b0e87ef  為 gist 檔案群組編號, 而隨後的  8954b8280c524c5781dc3c0b3565bc489d3aa3a3  則為 cango_gear1.py 的版次編號. \n 本網頁的 html  run2.txt . \n', 'tags': '', 'url': 'run2.html'}, {'title': 'run3', 'text': '\n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'run3.html'}, {'title': '作業倉儲網站', 'text': '1.首先要先下載portablegit_2.31.1 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 portablekmol_base (1) \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 python395 \n 2.然後解壓縮進data裡面 \n 2.接著進到老師的作業倉儲\xa0 https://github.com/mdecourse/cp2021_hw \xa0 \n 3.然後點 Use this template 這個按鈕,並在 Repository name欄位輸入cp2021_hw \n 4.有了遠端的倉儲模板,然後就要把它弄到近端來 \n \xa0 先用 cd tmp 指令到達tmp目錄下 \n \xa0 然後用這段指令:git clone --recurse-submodules (你的倉儲網址+.git)/ \n (也可以在倉儲Code按鈕下複製) \n 5.還要裝一個子模組 ( pip install pyopenssl) 直接打在黑框裡就好 \n 6.最後用cd cp2021_hw 到你的倉儲目錄下 打 cms 開啟動態網站 \n', 'tags': '', 'url': '作業倉儲網站.html'}, {'title': '建立倉儲的心得', 'text': '一開始在創立倉儲的時候遇到很多阻礙，解壓縮解錯地方，把該打自己的網址的地方打成老師的網址，所以一直跑不出來，其實剛開始還挫折的但後來經過自己的摸索以及同學的協助之下，我順利的完成了這項作業，真的感覺到前所未有的成就感，所以也開始慢慢喜歡上了這門課了，現在常常會在課後活動的時間，繼續鑽研這個科目. \n \n', 'tags': '', 'url': '建立倉儲的心得.html'}, {'title': 'W12', 'text': 'w12demo.txt \n ROC 國旗規格 . \n PROC 國旗規格  - 可以根據此規格定義, 新增  PROC flag  按鈕. \n USA 國旗規格  - 可以根據此規格定義, 新增  USA flag  按鈕. \n  導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n add 1 to 100 p261 ROC flag \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n \n', 'tags': '', 'url': 'W12.html'}, {'title': 'PROBLEM', 'text': '一直無法將國旗做出來，能改顏色和座標，但一直沒辦法將圓形改成星型 \n ，目前正在努力中，會積極請教老師和同學，盡快將問題解決。 \n', 'tags': '', 'url': 'PROBLEM.html'}, {'title': 'HW3', 'text': 'HW3 - AI 貪食蛇佔學期成績 30%. \n HW3 必須在 2021.12.22 22:00 之前完成. \n HW3 具體項目成果回報區 將於 2021.11.09 開啟, 於  2021.12.22 22:00 關閉 \n 網際貪食蛇的逆襲, 誰的 自動執行貪食蛇 能夠破紀錄? 目前直覺貪食蛇紀錄為 45 節 (除了蛇身節數外, 應該還要置入出現紅色標的物後的總完食時間). \n 手動執行貪食蛇 程式說明與整理. \n 自動執行貪食蛇 程式說明與整理. \n 自動執行貪食蛇 程式的改進. \n 參考資料: \n https://mde.tw/cp2021/content/Task3.html \n Brython snake 原始來源:  https://medium.com/swlh/sick-of-javascript-just-use-browser-python-4b9679efe08b \n https://github.com/mdecourse/snake-Q-Learning \n https://towardsdatascience.com/teaching-a-computer-how-to-play-snake-with-q-learning-93d0a316ddc0 \n https://github.com/mdecourse/SnakeQlearning \n https://medium.com/@italohdc/learnsnake-teaching-an-ai-to-play-snake-using-reinforcement-learning-q-learning-b63ac23dfdd1 \n https://towardsdatascience.com/snake-played-by-a-deep-reinforcement-learning-agent-53f2c4331d36 \n https://www.geeksforgeeks.org/ai-driven-snake-game-using-deep-q-learning/ \n https://www3.hs-albsig.de/wordpress/point2pointmotion/2020/10/09/deep-reinforcement-learning-with-the-snake-game/ \n 2016_Exploration of Reinforcement Learning to SNAKE.pdf \n train_a_snake_with_reinforceme.pdf \n https://medium.com/@hugo.sjoberg88/using-reinforcement-learning-and-q-learning-to-play-snake-28423dd49e9b \n https://github.com/mdecourse/Snake-Reinforcement-Learning \n Autonomous-Agents-in-Snake-Game-via-Deep-Reinforcement-Learning.pdf \n 延伸應用: \n \n \n \n \n https://github.com/mdecourse/snake-ai-pytorch \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'ai snake', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n \n 修改自洪偉陞的作業 \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'ai snake.html'}, {'title': 'snake (1)', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'snake (1).html'}, {'title': 'snake(2)', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'snake(2).html'}, {'title': 'run snake', 'text': '\n  導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  印出版次與關鍵字程式  \n \n \n \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  Filename:  .py    存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n', 'tags': '', 'url': 'run snake.html'}, {'title': 'snake心得', 'text': '這個作業對我來講有點困難，我做的蛇都只能從最底下慢慢爬，經過每一個格子直到碰到格子才又從最底下開始重跑，然後後來看到同學的作品覺得很特別，他的貪食蛇可以直接追蹤到梅果，所以決定拿他的當作樣本，看著他的重新打過一遍，才能順利完成這項作業，很感謝老師和同學的幫忙。 \n', 'tags': '', 'url': 'snake心得.html'}, {'title': 'EXAM', 'text': '隨堂測驗: \n 分別利用 random 模組中的 randint(), for 迴圈, range() 函式, 以及 str() 轉字串函式, 列出 10 行文字: \n 在 18X18 的方格中以按鈕程式, 文字為"列出 10 個座標", 放在個人作業網站中的 Exam (H1) 頁面下的 W13 (H2) 頁面. \n 執行後文字如下: \n 第 1 個紅色方塊座標為 (10, 5). ..... \n \n', 'tags': '', 'url': 'EXAM.html'}, {'title': 'w13', 'text': ' 導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n exam 延伸作業1 延伸作業2 延伸作業3 \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  exam開始  \n \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'W13心得', 'text': '上課測驗的時候花了一些時間才改出座標，然後按按鈕出現程式這個部份真的不太會，後來有去前面問老師，也已經學會怎麼做了，延伸作業的部分是回來家裡才做的，過程也遇到一些困難，程式跑不出來，後來有請教同學，問題也都順利解決了。 \n', 'tags': '', 'url': 'W13心得.html'}, {'title': 'Final Project', 'text': 'Final Project 佔學期成績 30% \n Final Project 必須在 2022.01.05 22:00 之前完成 . \n Final Project 具體項目成果回報區 將於 2021.11.09 開啟, 於  2022.01.05 22:00 關閉 \n 利用 Brython 寫一個會 令人想玩 的網際遊戲. \n 參考章節: \n \n 專題摘要 \n 資料蒐集 \n 設計動機 \n 設計方法 \n 結果與討論 \n 附錄 \n \n 參考資料: \n https://github.com/collections/web-games \n https://github.com/topics/web-game \n https://github.com/topics/browser-game \n https://github.com/leereilly/games \n https://bmsleight.github.io/brython-blocks/ \n https://github.com/mdecourse/brython-blocks \n', 'tags': '', 'url': 'Final Project.html'}, {'title': 'GAME', 'text': ' 導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n GAME \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n \n', 'tags': '', 'url': 'GAME.html'}, {'title': 'GAME 正式版', 'text': ' 導入 brython 程式庫  \n \n \n  啟動 Brython  \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n GAME正式版 \n  ######################  editor1 開始 ######################  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div 作為切入位置  \n  這裡的畫布 id 為 brython_div  \n \n  ######################  editor1 結束 ######################  \n  以下可以開始利用 editor1 的設定編寫對應 Brython 程式  \n \n  以上為內建程式, 頁面可透過 ?src=gist_url 執行  \n  add 1 to 100 開始  \n \n \n', 'tags': '', 'url': 'GAME 正式版.html'}, {'title': 'GAME心得', 'text': '一開始搜尋了很多種遊戲，想說能不能做點不太一樣的遊戲，剛好看到網路上有在教人如何做出猜數字遊戲，我就照著做看看了，做完之後發現它只能在網路版的python編譯器才能使用，所以就自己稍微做了一些調整讓他可以在自己的run使用，做完之後發現洪偉陞同學也做了猜數字遊戲，而且比我的方式更聰明，所以也將他的版本借來參考然後做成自己的，他真的很厲害，很多作業上遇到的瓶頸我也很常會請教他。 \n', 'tags': '', 'url': 'GAME心得.html'}, {'title': 'run src', 'text': '<h2>run</h2>\n<!-- 導入 brython 程式庫 -->\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<!-- 啟動 Brython -->\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n// ]]></script>\n<p><!-- 導入 FileSaver 與 filereader --></p>\n<p>\n<script type="text/javascript" src="./../cmsimde/static/ace/FileSaver.min.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/filereader.js"></script>\n</p>\n<p><!-- 導入 ace --></p>\n<p>\n<script type="text/javascript" src="./../cmsimde/static/ace/ace.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/ext-language_tools.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/mode-python3.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/snippets/python.js"></script>\n</p>\n<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>\n<p>\n<script type="text/javascript">// <![CDATA[\nfunction doSave(storage_id, filename){\n    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});\n    filename = document.getElementById(filename).value\n    saveAs(blob, filename+".py");\n}\n// ]]></script>\n</p>\n<p><!-- 印出版次與關鍵字程式 --></p>\n<p>\n<script type="text/python3">// <![CDATA[\nfrom browser import document as doc\nimport ace\n# 清除畫布\ndef clear_bd(ev):\n    bd = doc["brython_div"]\n    bd.clear()\n# Brython 3.3.4 內建的 container 名稱為  \'container\' 且 turtle 輸出為 svg 必須使用 div 訂定 id\nAce = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )\n# 從 gist 取出程式碼後, 放入 editor 作為 default 程式\ndef run():\n    # 利用 get 取下 src 變數值\n    try:\n        url = doc.query["src"]\n    except:\n        url = "https://gist.githubusercontent.com/mdecourse/e896a4705a95ac8cc4147b355b0e87ef/raw/8954b8280c524c5781dc3c0b3565bc489d3aa3a3/cango_gear1.py"\n    prog = open(url).read()\n\n    # 將程式載入編輯區\n    Ace.editor.setValue(prog)\n    Ace.editor.scrollToRow(0)\n    Ace.editor.gotoLine(0)\n    # 直接執行程式\n    #ns = {\'__name__\':\'__main__\'}\n    #exec(prog, ns)\n    # 按下 run 按鈕\n    Ace.run()\n\n# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定\ndoc[\'kw_run\'].bind(\'click\', Ace.run)\ndoc[\'kw_show_console\'].bind(\'click\', Ace.show_console)\ndoc[\'kw_clear_console\'].bind(\'click\', Ace.clear_console)\ndoc[\'clear_bd\'].bind(\'click\', clear_bd)\n# 呼叫函式執行\nrun()\n// ]]></script>\n</p>\n<p><!-- 用來顯示程式碼的 editor 區域 --></p>\n<div id="kw_editor" style="width: 600px; height: 300px;"></div>\n<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>\n<!-- 存擋表單開始 --><form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text">.py</label> <input onclick="doSave(\'kw_py_src\', \'kw_filename\');" type="submit" value="Save"></form><!-- 存擋表單結束 -->\n<p></p>\n<!-- 執行與清除按鈕開始 -->\n<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>\n<!-- 執行與清除按鈕結束 -->\n<p></p>\n<!-- 程式執行 ouput 區 -->\n<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>\n<!-- Brython 程式執行的結果, 都以 brython_div 作為切入位置 -->\n<div id="brython_div"></div>\n<!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->\n<script src="https://mde.tw/cp2021/cmsimde/static/Cango-24v03-min.js"></script>\n<script src="https://mde.tw/cp2021/cmsimde/static/gearUtils-09.js"></script>\n<script src="https://mde.tw/cp2021/cmsimde/static/SVGpathUtils-6v03-min.js"></script>\n<script src="https://mde.tw/cp2021/cmsimde/static/sylvester.js"></script>\n<script src="https://mde.tw/cp2021/cmsimde/static/PrairieDraw.js"></script>', 'tags': '', 'url': 'run src.html'}]};